---Task A--------
A1: Test the function decomp:
Generate a random tall (n>m) matrix A (of a modest size):
A = 
      2.04      0.165       9.52 
      8.79       2.59       9.64 
      6.71       8.01       4.12 
      3.03       5.06       8.99 
      3.45       6.84        6.5 
      7.86       1.56       1.97 

Factorize A into QR:
Q = 
     0.141     -0.132      0.721 
     0.608      -0.34      0.239 
     0.464      0.476      -0.36 
     0.209      0.391      0.409 
     0.238      0.576     0.0895 
     0.543     -0.395     -0.344 
R = 
      14.5       8.85       13.6 
         0       8.21       3.91 
         0          0       11.3 

Is R upper triangular ? => True

Q^T*Q=1 ? => True
Q^TQ = 
         1  -1.39e-16  -8.33e-17 
 -1.39e-16          1   1.67e-16 
 -8.33e-17   1.67e-16          1 

QR=A ? => True
QR = 
      2.04      0.165       9.52 
      8.79       2.59       9.64 
      6.71       8.01       4.12 
      3.03       5.06       8.99 
      3.45       6.84        6.5 
      7.86       1.56       1.97 

A2: Test the function solve:
Generate a random square matrix A (of a modest size):
A = 
      7.71       4.94       3.95       7.55       4.86 
      3.34          5        1.7       3.72       2.21 
      4.74       2.28       1.44      0.269       3.86 
      2.99       3.57        1.5       8.21       2.11 
      7.43       3.33       5.25       9.67       9.33 

Generate a random vector b (of the same size):
b =       2.16          7       7.77       2.26       2.46 

Factorize A into QR:
Q = 
     0.615   -0.00369     -0.181     0.0438     -0.766 
     0.266      0.776     0.0991     -0.542      0.155 
     0.378     -0.208     -0.757     -0.114      0.477 
     0.239      0.449     0.0174      0.829      0.233 
     0.593     -0.392      0.619    -0.0631      0.328 
R = 
      12.5       8.05        6.9       13.4       11.1 
         0       3.68     -0.387       2.69      -1.82 
         0          0       1.64       4.93       2.24 
         0          0          0       4.48     -0.267 
         0          0          0          0          2 

Solve QRx=b:
solution x =     0.0562        2.1      -3.97     -0.507       2.23 

Ax=b ? => True
Ax =       2.16          7       7.77       2.26       2.46 

---Task B--------
Generate a random square matrix A (of a modest size):
A = 
      3.94       6.77      0.755       1.87       5.23 
      5.52      0.763       9.33       6.64       9.51 
     0.829       4.58       5.23        7.8       7.63 
     0.212       3.08       2.86       7.64       9.01 
      9.99       7.82       8.45       1.22      0.496 

Factorize A into QR:
Q = 
     0.326      0.525     -0.423       0.48      0.457 
     0.456     -0.496      0.532      0.413      0.304 
    0.0684      0.556      0.608     -0.445      0.344 
    0.0175      0.412      0.366      0.497      -0.67 
     0.825     0.0121     -0.185     -0.391     -0.363 
R = 
      12.1       9.37       11.9       5.31       7.13 
         0       7.08    -0.0474       5.18       5.98 
         0          0        7.3       10.1       10.7 
         0          0          0       3.49       7.32 
         0          0          0          0       1.69 

Calculate the inverse B of A
B = 
    -0.203     -0.093     -0.653      0.755       0.27 
      0.16    -0.0316      0.316     -0.324    -0.0652 
     0.137      0.166      0.549      -0.71     -0.176 
    -0.429     -0.259     -0.555      0.974      0.338 
      0.27       0.18      0.204     -0.397     -0.215 

AB=identity ? => True
AB = 
         1   3.33e-16   8.88e-16  -2.22e-15  -6.66e-16 
  4.44e-16          1  -8.88e-16   4.44e-16   4.44e-16 
  1.33e-15  -1.11e-15          1   8.88e-16   8.88e-16 
 -2.66e-15   1.33e-15   4.44e-16          1  -4.44e-16 
 -2.78e-16   6.38e-16   1.57e-15  -1.83e-15          1 

---Task C--------
See Out.times.svg. The time it takes to QR-factorize an NxN matrix for several values of N is plot and fit with NÂ³.
