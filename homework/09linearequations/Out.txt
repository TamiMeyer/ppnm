---Task A--------
A1: Test the function decomp:
Generate a random tall (n>m) matrix A (of a modest size):
A = 
      4.89       1.03       7.67 
      4.67      0.365       1.41 
       8.8       9.63       7.78 
      3.66       5.72       4.68 
      9.03       6.97       5.92 

Factorize A into QR:
Q = 
     0.331     -0.495      0.799 
     0.317      -0.58     -0.429 
     0.596      0.437     0.0174 
     0.248      0.474      0.259 
     0.612    -0.0501     -0.332 
R = 
      14.8       11.9       12.4 
         0       5.85      0.717 
         0          0        4.9 

Is R upper triangular ? => True

Q^T*Q=1 ? => True
Q^TQ = 
         1  -6.83e-16  -6.94e-16 
 -6.83e-16          1  -3.12e-17 
 -6.94e-16  -3.12e-17          1 

QR=A ? => True
QR = 
      4.89       1.03       7.67 
      4.67      0.365       1.41 
       8.8       9.63       7.78 
      3.66       5.72       4.68 
      9.03       6.97       5.92 

A2: Test the function solve:
Generate a random square matrix A (of a modest size):
A = 
      6.34      0.821       3.52        4.3       5.72      0.712 
      4.54       2.99      0.607       9.82       6.72       7.51 
      9.48        6.8       7.97       4.89       7.78        7.5 
      7.21       1.34       1.25       5.48       9.64       5.87 
      6.04       1.53        5.4        9.1       3.65       2.06 
     0.754       7.97       9.93       1.07       4.85       9.27 

Generate a random vector b (of the same size):
b =       2.06       4.77       2.05       3.11       3.45       1.54 

Factorize A into QR:
Q = 
      0.41     -0.236      0.346     -0.119      0.268     -0.755 
     0.293      0.109     -0.642      0.637    -0.0433     -0.285 
     0.612      0.292     -0.132     -0.474     -0.542     0.0623 
     0.465     -0.221     -0.236     -0.158      0.657      0.472 
      0.39     -0.138      0.577      0.567      -0.23      0.349 
    0.0487      0.883      0.247     0.0952      0.385    -0.0144 
R = 
      15.5       6.99       9.67       13.8       15.2       11.1 
         0       8.65        9.3    -0.0486        3.3       9.43 
         0          0       5.05      -1.24      -2.33      -3.47 
         0          0          0       7.82       0.92       2.27 
         0          0          0          0       4.38       2.75 
         0          0          0          0          0       1.14 

Solve QRx=b:
solution x =     -0.253      0.134    -0.0233      0.437      0.323     -0.123 

Ax=b ? => True
Ax =       2.06       4.77       2.05       3.11       3.45       1.54 

---Task B--------
Generate a random square matrix A (of a modest size):
A = 
      2.32       8.86       4.24       1.42       5.92 
      3.06       4.65      0.794       3.01         10 
      5.52       9.66      0.663       1.98       3.47 
     0.203       2.32        5.5       3.54      0.853 
     0.444       6.87       2.72       6.82       2.96 

Factorize A into QR:
Q = 
     0.344      0.535     0.0934     -0.684      0.345 
     0.454     -0.194      0.137      0.461      0.725 
     0.819     -0.187      -0.12    -0.0179     -0.528 
    0.0301      0.244      0.913      0.202     -0.255 
    0.0659      0.763     -0.353      0.528     -0.106 
R = 
      6.74       13.6       2.71       4.03       9.63 
         0       7.83       5.41       5.87       3.05 
         0          0       4.48       1.14       1.24 
         0          0          0       4.69       2.23 
         0          0          0          0       6.93 

Calculate the inverse B of A
B = 
    -0.224     0.0834      0.234      0.217     -0.171 
     0.141    -0.0945   -0.00885     -0.137      0.086 
      0.05    -0.0107    -0.0139      0.198     -0.105 
    -0.169     0.0485     0.0324     0.0605       0.12 
    0.0498      0.105    -0.0762    -0.0367    -0.0153 

AB=identity ? => True
AB = 
         1   2.22e-16   2.22e-16   1.39e-16   5.55e-17 
  2.78e-16          1  -1.11e-16  -1.67e-16   1.11e-16 
  1.11e-16  -1.67e-16          1   -2.5e-16   2.78e-17 
  4.16e-17  -1.25e-16   -2.5e-16          1   1.06e-16 
         0   1.11e-16   8.33e-17   2.36e-16          1 

---Task C--------
See Out.times.svg. The time it takes to QR-factorize an NxN matrix for several values of N is plot and fit with NÂ³.
